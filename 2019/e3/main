from typing import Tuple, Optional, List

point = Tuple[int, int]
segment = Tuple[point, point]


def find_intersection(s1: segment, s2: segment) -> Optional[point]:
    if min(s2[0][0], s2[1][0]) <= s1[0][0] <= max(s2[0][0], s2[1][0]) \
            and min(s1[0][1], s1[1][1]) <= s2[0][1] <= max(s1[0][1], s1[1][1]):
        return s1[0][0], s2[0][1]

    if min(s1[0][0], s1[1][0]) <= s2[0][0] <= max(s1[0][0], s1[1][0]) \
            and min(s2[0][1], s2[1][1]) <= s1[0][1] <= max(s2[0][1], s2[1][1]):
        return s2[0][0], s1[0][1]

    return None


def length_of_segment(seg: segment) -> int:
    return abs(seg[0][0] - seg[1][0]) + abs(seg[0][1] - seg[1][1])


def find_intersections(w1: List[segment], w2: List[segment]) -> Tuple[List[point], List[int], List[int]]:
    dist_1 = [length_of_segment(w1[0])]
    for i in range(1, len(w1)):
        dist_1.append(dist_1[i - 1] + length_of_segment(w1[i]))

    dist_2 = [length_of_segment(w2[0])]
    for i in range(1, len(w2)):
        dist_2.append(dist_2[i - 1] + length_of_segment(w2[i]))

    ints = []
    dist_to_intersect1 = []
    dist_to_intersect2 = []
    for i, segment1 in enumerate(w1):
        for j, segment2 in enumerate(w2):
            intersection = find_intersection(segment1, segment2)
            if intersection:
                dist_to_intersect1.append(dist_1[i - 1] + length_of_segment((segment1[0], intersection)))
                dist_to_intersect2.append(dist_2[j - 1] + length_of_segment((segment2[0], intersection)))
                ints.append(intersection)
    ints.pop(0)
    dist_to_intersect1.pop(0)
    dist_to_intersect2.pop(0)

    return ints, dist_to_intersect1, dist_to_intersect2


def add_step(s: point, step: str) -> point:
    if step[0] == 'U':
        return s[0], s[1] - int(step[1:])
    elif step[0] == 'D':
        return s[0], s[1] + int(step[1:])
    elif step[0] == 'L':
        return s[0] - int(step[1:]), s[1]
    elif step[0] == 'R':
        return s[0] + int(step[1:]), s[1]


def make_segments(directions: str) -> List[segment]:
    points = [(0, 0)]
    for d in directions.split(','):
        points.append(add_step(points[-1], d))
    return [(points[i], points[i + 1]) for i in range(len(points) - 1)]


def find_closest_intersection(w1: List[segment], w2: List[segment]) -> Tuple[int, int]:
    ints, idw1, idw2 = find_intersections(w1, w2)
    return min([abs(x[0]) + abs(x[1]) for x in ints[1:]]), min(map(sum, zip(idw1, idw2)))


with open("input.txt") as file:
    directions1 = file.readline()
    directions2 = file.readline()
    wire1 = make_segments(directions1)
    wire2 = make_segments(directions2)
    print(find_closest_intersection(wire1, wire2))
